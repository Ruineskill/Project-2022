<UserControl x:Class="Presentation.Views.PersonView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:views="clr-namespace:Presentation.Views" 
             xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:ld="clr-namespace:Domain.Models.Enums;assembly=Domain" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:vms="clr-namespace:Presentation.ViewModels" 
             xmlns:enums="clr-namespace:Presentation.Enums" 
             xmlns:vd="clr-namespace:Presentation.Validation" 
             xmlns:pvd="clr-namespace:Presentation.Validation.PersonRules" 
             d:DataContext="{d:DesignInstance Type=vms:PersonViewModel}"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             xmlns:converters="clr-namespace:Presentation.Converters" 
             TextElement.Foreground="{DynamicResource MaterialDesignBody}"
             Background="{DynamicResource MaterialDesignPaper}"
             TextElement.FontWeight="Medium"
             TextElement.FontSize="17"
             FontFamily="{md:MaterialDesignFont}">

    <UserControl.Resources>
        <ObjectDataProvider x:Key="LicenseType"  MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="ld:DrivingLicenseType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>


        <Style TargetType="TextBox" BasedOn="{StaticResource MaterialDesignFloatingHintTextBox}">
            <Setter Property="Margin" Value="0,0,0,20"/>
        </Style>
        <Style TargetType="ComboBox" BasedOn="{StaticResource MaterialDesignFloatingHintComboBox}">
            <Setter Property="Margin" Value="0,0,0,20"/>
        </Style>
        <Style TargetType="DatePicker" BasedOn="{StaticResource MaterialDesignFloatingHintDatePicker}">
            <Setter Property="Margin" Value="0,0,0,20"/>
        </Style>

        <converters:CarConverter x:Key="CarConverter"/>
        <converters:FuelCardConverter x:Key="FuelCardConverter"/>
        <converters:DateOnlyConverter x:Key="DateOnlyConverter"/>

    </UserControl.Resources>


    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="0" Grid.IsSharedSizeScope="True" >


            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="200"  SharedSizeGroup="Default"/>
                <ColumnDefinition Width="30"/>
                <ColumnDefinition SharedSizeGroup="Default"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>

            <TextBox Grid.Row="0" Grid.Column="0"  md:HintAssist.Hint="First Name"  >
                <TextBox.Text>
                    <Binding Path="FirstName" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                        <Binding.ValidationRules>
                            <vd:NotEmptyRule  ValidatesOnTargetUpdated="True" />
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>

            <!-- Last Name -->
            <TextBox Grid.Row="1" Grid.Column="0"  md:HintAssist.Hint="Last Name" >
                <TextBox.Text>
                    <Binding Path="LastName" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                        <Binding.ValidationRules>
                            <vd:NotEmptyRule  ValidatesOnTargetUpdated="True" />
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>

            <!-- Birthday -->
            <DatePicker Grid.Row="2" Grid.Column="0"  md:HintAssist.Hint="Birthday" md:TextFieldAssist.HasClearButton="True">
                <DatePicker.SelectedDate>
                    <Binding Path="DateOfBirth" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True" Converter="{StaticResource DateOnlyConverter}">
                        <Binding.ValidationRules>
                            <pvd:DateOfBirthRule  ValidatesOnTargetUpdated="True" />
                        </Binding.ValidationRules>
                    </Binding>
                </DatePicker.SelectedDate>
            </DatePicker>

            <!-- NationalID -->
            <TextBox Grid.Row="3" Grid.Column="0"  md:HintAssist.Hint="NationalID" >
                <TextBox.Text>
                    <Binding Path="NationalID" UpdateSourceTrigger="LostFocus" NotifyOnValidationError="True">
                        <Binding.ValidationRules>
                            <pvd:NationalIDRule  ValidatesOnTargetUpdated="True"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>

                <!-- Car -->
            <vd:Proxy In="{Binding Car, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}" Out="{Binding ElementName=PersonCarRule, Path=Car}" />
            <vd:Proxy In="{Binding FuelCard, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}" Out="{Binding ElementName=PersonCarRule, Path=FuelCard}" />
            <vd:Proxy In="{Binding DrivingLicenseType ,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}" Out="{Binding ElementName=PersonCarRule, Path=LicenseType}" />
          

            <TextBox Grid.Row="0"  Grid.Column="2"  IsReadOnly="True"   md:HintAssist.Hint="Car">
                <TextBox.Text>
                    <Binding Path="Car" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True" Converter="{StaticResource CarConverter}">
                        <Binding.ValidationRules>
                            <pvd:PersonCarRule  x:Name="PersonCarRule"  ValidatesOnTargetUpdated="True" />
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>

            <StackPanel Grid.Row="0" Grid.Column="3" Orientation="Horizontal">

                <Button Content="Pick"  
                        Command="{Binding DataContext.PickCommand, ElementName= Detail}"
                        CommandParameter="{x:Static enums:ModelType.Car}" Style="{StaticResource MaterialDesignFlatMidBgButton}" Margin="5,0,5,0"/>

                <Button  Content="Remove" Style="{StaticResource MaterialDesignFlatMidBgButton}"
                         Command="{Binding DataContext.RemoveCommand, ElementName= Detail}"
                         CommandParameter="{x:Static enums:ModelType.Car}"/>
            </StackPanel>

            <!-- FuelCard -->
            <vd:Proxy In="{Binding Car, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}" Out="{Binding ElementName=PersonFuelCardRule, Path=Car}" />
            <vd:Proxy In="{Binding FuelCard, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}" Out="{Binding ElementName=PersonFuelCardRule, Path=FuelCard}" />

            <TextBox Grid.Row="1" Grid.Column="2"  IsReadOnly="True"  md:HintAssist.Hint="Fuel Card" >
                <TextBox.Text>
                    <Binding Path="FuelCard" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True" Converter="{StaticResource FuelCardConverter}">
                        <Binding.ValidationRules>
                            <pvd:PersonFuelCardRule x:Name="PersonFuelCardRule"  ValidatesOnTargetUpdated="True" />
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>

            <StackPanel Grid.Row="1" Grid.Column="3" Orientation="Horizontal">

                <Button Content="Pick"   
                        Command="{Binding DataContext.PickCommand, ElementName= Detail}"
                        CommandParameter="{x:Static enums:ModelType.FuelCard}"
                        Style="{StaticResource MaterialDesignFlatMidBgButton}" Margin="5,0,5,0"/>


                <Button  Content="Remove" Style="{StaticResource MaterialDesignFlatMidBgButton}" 
                         Command="{Binding DataContext.RemoveCommand, ElementName= Detail}"
                         CommandParameter="{x:Static enums:ModelType.FuelCard}"/>
            </StackPanel>

            <!-- License -->
            <vd:Proxy In="{Binding Car, Mode=OneWay,UpdateSourceTrigger=PropertyChanged}" Out="{Binding ElementName=CarLicenseRule, Path=Car}" />

            <ComboBox Grid.Row="2" Grid.Column="2" md:HintAssist.Hint="License"
                  ItemsSource="{Binding Source={StaticResource LicenseType}}" Margin="0,0,0,20" >
                <ComboBox.SelectedItem>
                    <Binding Path="DrivingLicenseType" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                        <Binding.ValidationRules>
                            <pvd:LicenseRule x:Name="CarLicenseRule" ValidatesOnTargetUpdated="True" />
                        </Binding.ValidationRules>
                    </Binding>
                </ComboBox.SelectedItem>
            </ComboBox>


        </Grid>


        <GroupBox Header="Address" Grid.Row="1" Grid.Column="0">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <TextBox Grid.Row="0" Grid.Column="0"   md:HintAssist.Hint="City">
                    <TextBox.Text>
                        <Binding Path="Address.City" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                            <Binding.ValidationRules>
                                <vd:NotEmptyStringRule  ValidatesOnTargetUpdated="True" />
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>



                <TextBox  Grid.Row="1" Grid.Column="0" md:HintAssist.Hint="Street" >
                    <TextBox.Text>
                        <Binding Path="Address.Street" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                            <Binding.ValidationRules>
                                <vd:NotEmptyStringRule  ValidatesOnTargetUpdated="True" />
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
                <TextBox Grid.Row="0" Grid.Column="2"  md:HintAssist.Hint="Number" >
                    <TextBox.Text>
                        <Binding Path="Address.Number" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                            <Binding.ValidationRules>
                                <pvd:NumberRule  ValidatesOnTargetUpdated="True" />
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
                <TextBox Grid.Row="1" Grid.Column="2"  md:HintAssist.Hint="Zip Code" >
                    <TextBox.Text>
                        <Binding Path="Address.ZipCode" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                            <Binding.ValidationRules>
                                <pvd:ZipCodeRule  ValidatesOnTargetUpdated="True" />
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
            </Grid>
        </GroupBox>

    </Grid>


</UserControl>
